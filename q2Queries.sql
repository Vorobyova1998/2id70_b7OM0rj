SELECT coursename, grade FROM greaterFive WHERE studentId = %1% AND degreeid = %2% ORDER BY year, quartile;
SELECT DISTINCT studentid FROM excelentgpa, studentregistrationstodegrees WHERE gpa = %1% AND studentregistrationstodegrees.studentregistrationid=excelentgpa.studentregistrationid order by studentid;
SELECT degreeId, count(*) filter (WHERE students.gender = 'F') *100 / count(*)  AS percentage FROM StudentRegistrationsToDegrees, activestudents, students WHERE StudentRegistrationsToDegrees.Studentregistrationid = activestudents.studentregistrationid AND StudentregistrationstoDegrees.studentid = Students.studentid  GROUP BY degreeId ORDER BY degreeId;
SELECT	COUNT(*) * 1.0 / (SELECT COUNT(*) FROM Degrees, StudentRegistrationsToDegrees, Students WHERE Degrees.Dept = %1% AND Degrees.DegreeId = StudentRegistrationsToDegrees.DegreeId AND StudentRegistrationsToDegrees.StudentId = Students.StudentId) AS percentage FROM Degrees, StudentRegistrationsToDegrees, Students WHERE Degrees.Dept = %1% AND Degrees.DegreeId = StudentRegistrationsToDegrees.DegreeId AND StudentRegistrationsToDegrees.StudentId = Students.StudentId AND Students.Gender = 'F';
WITH temp(courseID, totalGrade) AS (SELECT CourseOffers.CourseId, COUNT(*) FROM CourseOffers, CourseRegistrations WHERE CourseOffers.CourseOfferId = CourseRegistrations.CourseOfferId AND CourseRegistrations.Grade IS NOT NULL GROUP BY CourseOffers.CourseId), temp2(courseID, aboveGrade) AS (SELECT CourseOffers.CourseId, COUNT(*) FROM CourseOffers, CourseRegistrations WHERE CourseOffers.CourseOfferId = CourseRegistrations.CourseOfferId AND CourseRegistrations.Grade >= %1% AND CourseRegistrations.Grade IS NOT NULL GROUP BY CourseOffers.CourseId) SELECT temp.courseID, temp2.aboveGrade * 1.0/ temp.totalGrade AS percentagePassing FROM temp, temp2 WHERE temp.courseID = temp2.courseID ORDER BY temp.courseID ASC;
WITH temp(CourseID, MaxGrade) AS (SELECT CourseOffers.CourseOfferId, MAX(CourseRegistrations.Grade) FROM CourseOffers, CourseRegistrations WHERE CourseOffers.Year = 2018 AND CourseOffers.Quartile = 1 AND CourseOffers.CourseOfferId = CourseRegistrations.CourseOfferId GROUP BY CourseOffers.CourseOfferId), temp2(studentID, grade) AS (SELECT StudentRegistrationsToDegrees.StudentId, MaxGrade FROM temp, CourseRegistrations, StudentRegistrationsToDegrees WHERE CourseRegistrations.CourseOfferId = temp.CourseID AND CourseRegistrations.Grade = temp.MaxGrade AND StudentRegistrationsToDegrees.StudentRegistrationId = CourseRegistrations.StudentRegistrationId), temp3(studentId, excellentCount) AS (SELECT studentID, COUNT(studentID) FROM temp2 GROUP BY studentID) SELECT studentId, excellentCount AS numberOfCoursesWhereExcellent FROM temp3 WHERE excellentCount >= %1%;
with temp as (select sr.degreeid, s.birthyearstudent, s.gender, avg(gpa.gpa) from activestudents a, studentregistrationstodegrees sr, students s, gpa where sr.studentregistrationid = a.studentregistrationid and sr.studentid = s.studentid and sr.studentregistrationid = gpa.studentregistrationid group by cube (sr.degreeid, s.birthyearstudent, s.gender)) select degreeid, birthyearstudent, avg from temp;
with temporary as (select courseofferid, coursename, year, quartile from no where total is null union select co.courseofferid, co.coursename, co.year, co.quartile from courseoffers co, assists a, studs s where co.courseofferid = s.courseofferid and co.courseofferid = a.courseofferid and s.total > 50*a.total order by courseofferid) select coursename, year, quartile from temporary;
